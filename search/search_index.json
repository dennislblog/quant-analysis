{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"AEROHFxOxbJA4rn0v/Fcsg==;wsEv+9mDNgri+lH7kEfIaSBSw9z6p0XvAIS27XKQxHRYkBJ/sQDtlug9DyrvvY3jgS07yMzg8Dx8ZXsEmw79L+J8IzponYKjZqgQbQFMNzuFKUJ857s1VRz0LE0h3jPXzeu5uPb35ZYpYiWpPFbD1yp0taxU3tOUNGjAO2kgXiU8wGnH7ub0ABB8jgOUhZBDVe94HDo2PPHdHJEvBTH62jGgfp8l1Px/kjS1beOcQp7lUSu4JGz5u/FZ9TpMcFRroDS1bFrsBHEfokC5Ta+pAJfI/Gbq6dEWeYA6ajpMM1d8FhjtjdrdJlmtmwFoSHWhRGFlkqRcl8T5KAmsENYpCg7Huvq9G02cqKCnFsg56zFoxeoxHUkbbVIy+NL1trT2JTEsoBRYylEnGkkx2o4adUYR8q6OBSKJuyjYZVq4HgMbIzlr7NYSOWPSl0jMd9Rv5H8OSClvE1M9Y/+kHO5LkmzvVHBJwrW3d823Q9XBnCQXe6V9IwgJbJqXaMYhUwjVzOvO6ET2ONxbUB7PVpUHNKJXWFJeVhCGwdjTps9C4EMRICdF75TlcSQT5KlFlI/vNztEwJ8FNUJhF9QJYzuYqz8uZFK7iWtW1yw3AHxZJihfS5vy2zUAqOXvo8gqysh5zaIBWtQ1BWInkAM4JNVKRpAHRGJtKMp6PjRecBhdbDHIL/ZKeZKqe0cye96427EXosPxxU2E0xn/VmYwxY2B2nvMu0Q74ElNZjidnD0Er6t5AHpjTJCMAu//T8oV+VZkKV4C9RfDtbKkySSnyki257l7FfI9iqLwmEBvWMlvUHF/CYxxvKLVMQhA26xDaMflGtFtAzK4TKXPlo29t+qlYyl8ZEO7w+qi/h9VqDiqZF9HTbNMJnvZS3Fk8wBB0OS6hzUYnMl7A8fedA71MMpsMbpHRADZddFa/SbSOXWmIpYTtqoSrEFnCZ5+ZZkMdhi9IIKYigb3QufeTG5Ybm8OW7hCWcrzZ+jt7XaXhucGoHIAYRbGQuxvtHfKuZdxiu7YLZVCGk9Felayko8g1VJ+LAZohDKZwdn3oTPfWJRyZ2GWs2eLblJudQLUx9VFZ7/1it34xYKDGSfQtwZCTEHbZxwICR/YzTD9eFAw/f0iWzt/vp6SL69H+XOos0Xv805oXuUbwd54M0LbZecdYX/qWT+9ZRNs7PuqGkZVQIdNV5OKiuyk2xWN0AZRLb/kL2YrUAxmag0Y1Zp/baF2QjPHvg==;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Home"},{"location":"analysis/amm.html","text":"m3EcKc5TBPHGDiZFLLtfbQ==;IMiIFF4tw7lQqRyrecBnhBANb5yxpMKlrqS9GKFkHPNnebeeGWtYCG+ABWftkMktYShfLTpQ5W/wGv3VN4V+5X92HEfPQR9obmylXRrhuGvk+HcVqJWYrXpJl1ZkVZk4GXpBM13b/jpx1EPUXFvhBaWLy8iF/QtB/XlIA5xtShYINw3tlUeG1+0iZVU9aPrm+A98AUPAMqGeuhXrYzFzSxTFwpMsj0Ch9ixR1j5++xHSzR1B7HhK3OrBDi0hzWYy;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Agent-based Modeling"},{"location":"analysis/finance.html","text":"IGWAiQWFFcjxXssQlN32Iw==;2yRG1kN84KxsHIcyHd9OgLvR3CmOj7lesByuCWP01XpTQmI/l8gJcK9TcgukHAeTBio2HKmzTVFzS7tejb+InPL7YhSN3y+BJ/rhaBhaY1PvRfuU5ExESGf5K1LlyGDwZd0LFHfRr5V5Gx303pdSsoAh+rEvIzXUQmtqI8c6cR07XXi/RlJ5iplucWYwLBLyGfg5UVaAHg/xgSgcxYobVA==;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Finance"},{"location":"exp/config.html","text":"fiDi0L4rVix0gT9qGer4Ww==;yz78MCfBBcH3g7JnpVMpVMGEm7VZgCtkxBV7WAgnVeZZpnnPGi3pjDPb0Es+JACBcMV1EkGNMnvjcsSrpe1GfpBORlJ2jDvR2Ng8hKqMTttnqirSZPkPA714V8IelrpEd0fntA9MmBJUPJQBhoPnpUDEyl1tEOfjQkN4Ptd9sR05jHk+gZW1GhiKv9Yuen3lmg0QmWYl42ze46TJrUOBkQ==;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Configuration"},{"location":"extra/markdown.html","text":"gDvJRcjXIv/tudfenu4ehw==;vZoWV/MjjN03txRfGSkpyaXGvzW/nbEsN1jxB/KTI+k=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Markdown"},{"location":"extra/plugin.html","text":"T7R7JijYXHZ8HBZUC5IiNg==;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;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Plugins"},{"location":"extra/pymdown.html","text":"NUnYVE63oA0MoX82GSytZg==;;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"PyMdown"},{"location":"intro/index.html","text":"/EM/B1VBt7ES5+AF4Io/Ow==;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;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Introduction"},{"location":"intro/goal.html","text":"Xg+VZviMvJA2NnG9Kt3AjQ==;glNQ00WSQFc8MH5CRBWTqtHID0W3i/jzufd+E949364RvF9PM4IfzCCGMPRCT5ZZ7Fq93hVFd0hjmDekwOcC+jBOgkfKBFmkbjxFR1EJf2sttAi4t9Sd4FnDF8JUVlQvlVQfk0m7wH5lGefBb10+9zBCh4My9ont3Ow4ZwtRX2U=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Objective"},{"location":"intro/motive.html","text":"0H+SDiGdPqXDv7aERcdaYw==;ztaVHOZTaKnGJ2jE+F8MQyr6sMwic5Ssi1lqKcyNMTcSzefDzedJHqOYk9cpi/x9Dzku++0LjoBhtgADTfK57D2JlFn0tuPtFJDzLQIqlWoe9GFXBQ5wGvt++EksLEJyodVWzmM/Osno4Q4JFBicAbJwIYQnnwhb5HngKx92wb0=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Motivation"},{"location":"knowledge/amm/iabs.html","text":"GU/ubAhv1rdSkSBgh+GVRQ==;;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Strategy Evaluation"},{"location":"knowledge/amm/reward_design.html","text":"2jAqbMiae9gRyHgld7qeBA==;fcjaBdg85/VzfVyOaVoRU5ffxMxJqnT79frPsSNZSJmt6SMVWKO+GmEsvmqrUYJtZiHtNTF/CAh4ZLXmKbKO6xYutDm5RBXNuBxmsOHPJN52iiJI6ibkBoScyxUp/Rwgn/9fOh6rDsiUfAkfwDLFGfBtogJ15ZimgCxRdXD/IHqOTMNJRRszMJwNI+/zo58LnSJ0y/zKTsRIzTvXpke8yA==;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Reward Engineering"},{"location":"knowledge/finance/kyle.html","text":"QXQ7G4fyt8Y3OCp2eSFIRg==;dVKu5/zHIB3zgK7txvw42ij58Fufw2Kae8m9zWhA4FoChYcjrp9Q1gvQ1+rlvbQzyX1cXSkMKuLwwvQkOpgfouwkT8giVAlT1vWlu82tBz3YHTu+bszglpOiFL2vZFcZKkoAcdw0U0JbH+WNMMT7Ghkt+lqu93bDao4x1B2r7bo=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Kyle Lambda"},{"location":"knowledge/irl/index.html","text":"82EdCd8CQVxDxW0blExXAg==;yWDL0nAi9KDI6PeNycJfhAeT3iDhW6GmikbraLUFubRrIX/8wbXd1PEHEpiNVosxu4e/L6PQEAA6cdV8QogstTdNCWnnB8dPCOtwFDRjG7oIoxnwsP3NuLWITvS4K5AURRNQ4xhlU7dNOVvyfDOQ0pKdDpHmXmra277/bmxakpL9lq9jGotZB6MQYd2jALSO70KDdr47juQpWQnjNgu+bruI35YrBUO+oEau21UN2otzthej+92YwO0MdFXpt2SS;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Introduction"},{"location":"knowledge/irl/example.html","text":"9emI+aQ9fOtxceKHNDyb5w==;FZSoXuu6BAHL9th+CVzEiAJkd2kEJ4yi0lMZoLVZKOEPMfXLoamFkzD3KmxfQz4aNgMBoG5v/+ug7za3il8UkHYF7tEU7luEV62c2VwzS7rCApRhycdSR9PUuTJJaWm9eKUJjpIta+/vW4u46s3nXDG3R9x8z/VKXcdILx9Xh/8=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Example"},{"location":"knowledge/irl/method.html","text":"qbe494IwnIwKLNfNr2hJOw==;ov6yv/56Sm+rS5bHci7aWr6HRQSBAnKOWU1v9dI5BcUxiIHyOIxtqZa151mnlaeIm9O6WhlNoO1RZC/HwtLRlX6Jf+2otXVdQhA/hjV7x7qUJ3oH77yZs0xIVfFgrGE8AFHG0tx7ljWzT7o6MsIHNDn72+SsdtWV7TDvgJB9sT9N3zZYFsQ2rOx2r5IfboEOBwpgL/Er6gZShGm0HcwcVQ==;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Method"},{"location":"knowledge/other/index.html","text":"+tohuF4f18InZ2MqhDXkQg==;fNzHOmy9747xLL71DyUVEZeQKXghvphMMr580PkkeN2QKw6rOADHN8bk5kcsA8phJXe6SGnHloESP62fO06tBfaWM+aymlRq7oOkki0UjaPjMAJWlLtq4coxkXGUGNonMI+ebUYRLYwvrRS9GxSr8OYbA98ydaT4MBJMoX9aBNSvYHFcILN01ZRLWZPJkHTaVoKgHaUo6T7U7/eLgoHb6w==;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Introduction"},{"location":"model/data.html","text":"xuGgRVfO074o4mDFZO+4UA==;jgach6gC0pdi7/lWTCUJWqMWwRbEkSH3o8COgLUQYLu1bW4iqDn9Eqlzki9aPyhFRWFsJJRLOnX7GqP/anBSiNK/Q5f0xN9rqlx/DMmiPsR8Zr7qBkwGnf4rqaM6yuRZL2KTcoyEyg1Fy3ML2B5H+MaUdBgQrf6XO15VZ3K5m+Y=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Data"},{"location":"model/env.html","text":"uDcQn2DwVniwVObMbL9YAQ==;sphm4Qyv9kp7ZIm/p1hGfMQtEs9pblfaY6YiLkGeksWO/n/qdvtUyLQm7K5f06MxIv+x9Mz5++uZNgDlo+XGeoC99cWScqbXBBg3Nm5ElNW6dNaXezRFpshfoJXd5IzDAZhnXsvopL/TusXatWNgR96raAdgCZs40atpuadV4ms=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Environment"},{"location":"model/policy.html","text":"Y01rQQGJ9M6n4tmKvZ9J8A==;XWr+IJdlHWL/5tSE6Zyr7JLovC3WNUxJlyMF5kNs/GHfKaMdQGhwA2fElLn+//vzQZDmhW8PBBCrIkXQqSYusNJBmsiYyC2k/7j6f9kpPdGnaJemhUMtqGend/XGPc3TraNm+y3/W8BrYiattOn9692QZHfv2SBZXMg8D/O0iN0=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Policy"},{"location":"model/reward.html","text":"2m05tganrceJ24sYGuM6Qg==;neYFKYZGttIC6aFnEdebcc1b8OTgYt0C66CJ1Kak4Ig54eNtdsVMOLJx/uens6x3VYc37vSWoeqT72OWHdte2NfIm6y9MYlXf2gTJ4R9S+PHuXyjFMjjoRYBGpyqHm80nlhd6AUHaepAbUKuzOtzZ66p0bNHP0jaJ2g/UhhpDJk=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Reward"},{"location":"model/utility.html","text":"qp17VHOae8PNXbNPKYEBWQ==;RI1MQHJc+yiHGbKj05W3oW3c8aL/iE+qz6lVAmS5khYozH5cPIAL3GwWKI+HkHGpiBL4LqTRjUQHb/FhHJWde8j591OZZo47V6zk0NkAKoft4KtsnZB41jTSYazoxg/0HeKeY7bTlOQXJvzBND1tGgklrEgJII1VeuccOTI0sIA=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"Utility"}]}