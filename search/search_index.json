{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"5mkoP03YOJeqPjRyMu1jww==;KBsgSFkGh5GdqVBEUbC9zQwJJyvokrbYnjvYSXfgNtudStibkT9Lf9Zr3yvUqk3DoAtp0ffmbfxqwZGSFlJbUEJW9CWEwSWcd2azGvADrJLbcxdROUQq97R7XkFYd/JG2ED1+BMp4cp8SJXo2xmGPmg3AwCmtEtOo9SINSL57YbyZAc22LBHmHhKFEUjZnGxJNTLbSuQLUcZFGd5G6pqlIjuaD6LB6nV1TogHObvrAPmTzdLJth6md1cwf4PAKK5IOdvpODArjMFa7mL4PAJyWiHAJCBNyxlLXWk+NenDY2rtRqsPgaZDVVbWw3/Ew5p58uVsMRgyViRI6AYxHOGsGMYtK7z/6GxpEs0xVc11rCFTxIZo98CL4Fc5/vS8dXk7sugRJ53VrlfyYpPp3LFLRRNc4xhQ5ldfN5c1XdsGrMOsRO5Zl8MrsS78Z8t+gH4Jt0lWeg3Io9P9IqgjAabdv4ToECxIigfrSNbskvfOj6oOJDmOCH6V5VORRnGz1nCv8djjS3UBuu7TeyNIsCcFnODweHSU3DCDUh6Z6vz+66S7ykTVBKRygO/CffBNIkn4Wbms8SYhR+22v6E1lh3Tf11u+fQOQDI27Tsvm94ohbhILsvS2fN/hugrUCG6OPePkvXcg1CkvWTeuTg1AxRIoTMv+zD6nWPSdRpxae0xrek2M3jiu6Nu8wTbn1VUQITKqBA+HcqctYy7ydfSNzVE64GfFr29PHlT5s0yR46ZiUv/eBPitTQW5xYCl3bydwgfTiyN6GdMfVVIOogI7ffQGuSsLBX0NEWOUi42mNAlrbGSolTBL36JeEg0WuIT0t6Yv86El69Uw2BhfVC2nokwKTpTc9dtaHSoGea9Gys9iFirqlWTr3PaQ8th0h4kP3PF9Z8fiVBevBYHy61NeEoKYV2eR/F91xAyAt1E6VXS7rtmkFylv7w1QoaQmSsIKnrghsuMrTlpeypgdnmmIVQHOZ0yX4HdnUT0IzbRFx8uJtn5NHUwsRp/A2d1c+mJ5Ezx4+939x3zbtlmVe3bpTZ6ZmntqLJxVUZe6PGFt/NDIFPCJI606OqtePol9nRXXHQurILglpAxl4yZRPBggSx10/6/1Y3CHQjuHNuCFCQ6O2lwhjPk0cyxTKJpmc0MvkjnMMvI7RFul+TqiTewVJDAAo8UbGZEzmV6ayzxZmA1g4mRei8paWHcSOQf1lP1Bi1Qd2I1WVsNdbFyiPNSMhhFw==;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Home"},{"location":"analysis/amm.html","text":"78oxdgtE42tma2eVONpHfA==;eXMXtcjtlN2Lwc//5oz8oasJvi1FX9Fis6WXKXKbWhiY5ieqN0pgkolhg8euN383krwEst69Eq/+/kzX7dprP3fcIbtLNYca5vorBHGhQvZgZls9KxLAMcHOOzxhxJnTZHEKus3XnJbU0eUTFzNIWZxHB6GPmnhyE9vosUolHGrMZCpuzdU1+yrIIqdbmGCJ2zOGs/Xf1h4CSNbZd07CHLIWENn7Ox8RQk3bgtgShiFB+pA7XZVIQ0i2Ex2UMJ1c;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Agent-based"},{"location":"analysis/finance.html","text":"KrUom0TQecEB+m1SYqTGSA==;6iNd08n7UqpZwtUOl7uNrEw9w+EiUgSLh7ObSbYcACysECEKrqkyfFNUR/feJeqmr25H7VZM2IZYotc8H1geYcpqI57iSyhkM0HiyzEWNCrwAO/EJgEILIOAifpIrJv5DwzklUHsvosDdZh4Z1QmMsXDA5CepnwNNkvUtoTJMrnvUDyHztPuDzHLJ9G0x/0dhUuSqSOmmKrW3Z9PQm8VDw==;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Finance"},{"location":"exp/config.html","text":"ThscJTjZKp61H5igbJ3Qww==;mQi9y3pxZd7zX8AnV7ojbBOb/ggAgd8W/w9ySWrG3PDDn6SDzkpGg3BNEQVRTCk3SLcp4vtV1BoZT9EkLmyfRo7ntk/2CFGi6ziYmGRY9fUYGAxy0HneGNl0swvM9PkLkwmarNoS+9QyaMcUjG8c0ZuKawEQLZTe+FF2N1dRmWJddElxDRem2c3JqdMWrL9ZikKPtCMi6WcIoLtGfFj8FA==;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Configuration"},{"location":"extra/markdown.html","text":"kq7KAf9znAM/tYSEG43TuA==;v7/OSTxGuKK3ZMRo8J29z30X8nKsFfrEOLppMhzazu8=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Markdown"},{"location":"extra/plugin.html","text":"F/SjBYPMMK6ZtzZiVF/oUw==;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;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Plugins"},{"location":"extra/pymdown.html","text":"8i5J4zNo1jxGNYXXf+evog==;;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]PyMdown"},{"location":"intro/goal.html","text":"4CxmxVexeg4fyn5hj3CaOg==;5Jnt8yU+f0Y2051efZWcqeOHfREJrnD3KrAmXY1qJ4ztMQu46OyYXHM3PAxrOFw0mAUjiAr/05sboRGHGJwLeMZljbhl+PFroGPORVson4BOLKi1SDw004kKT5g6sfH0AZ5FGoriBUQY4DmzppxdfRtFMJ2oOzoUTY/jl79VxoE=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Objective"},{"location":"intro/motive.html","text":"EwG5f4GZNPHmEBlFGD3lMQ==;/v8IHiUTi4lHNpRnt3jT3wdO6BKAaUzQbOVlqT8dd4r3dmLvgkyWLJyzExUkAz+RZ20i31PWkIRqDz7ebW+6+xoIVmaZ4/P0Rclls1a/jUU26qZTGmzeRaEgN4kpEwPsKjImVykcDrOEJgjiqpxpY1GiFJIKgGIhnTfhMKjnHqQ=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Motivation"},{"location":"knowledge/amm.html","text":"7TeRCJPgEUVE5NaKPRv2PQ==;;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Agent Model"},{"location":"knowledge/finance.html","text":"qQ62oESyelvbfEUdBHzfYA==;PPGAJuBRdUPqHLwW1rDgZl1fRJXoa6IdhMq/wovJGNDpRHjQbN9H3ZdfvQDqWDsEJAkEKXzPmx+PtNMoimvEs6Ia/GOtRhrvxrvxNzc8wgIEBv1O8oHF3U+TmZYNrAaXLhpAb/NjkHr4CjIQbp1ChmmVQVAP8/ZWNcTP8IjIFrM=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Finance Model"},{"location":"knowledge/irl/index.html","text":"HgRt5EekgTo19QL6zvAqRg==;ExrwUGsLR0syVBq7Lg1wlCBa9Zzf2QzJevHcs876+pum5ZvoGBQHXDJhToBj9+1LUrNhVnKax9WjlYvqiguhM7TUNBHKS3myPUfPFeHByuTHCouu+Fq3vVJ/XXsylkBtWZtKWlEPJdqUqgNpwhuLCNci69Q6lH5+C4qtYf/3SdwqPlLqW38yUbfT+xeUi1EHy1/p7mASnzt8SSbEDGxOJX4rPhrrBe7RnCkH7t//YkJV1neiGEWOHT5+m+b+no9t;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Introduction"},{"location":"knowledge/irl/example.html","text":"BIYB+z1yM7jOa3XZ+fjw3Q==;dqI6tym9JnB6wSTeQ7I+PziuMhs6immNIhgmhLNezYH5hrnDTs6eYoiOsOJiTsGrVjtdEhXZi6sQ415Au8NExm6i2+K1EGzIaS5QLMZ5K6ImCp/TeH/MZA9yoMNJ67Pzetg/0jOH89nCyLZCGxs7aN9d7tHHRK56IhnmVU+4HgE=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Example"},{"location":"knowledge/irl/method.html","text":"4w1z3FiIfkIx1fkaIukugA==;/0k5Ib1pZJfA8nISbeeMI50ip4LQMmQnb/eWaBEtLZ4RqWw4RDufcw+g7PLfSCVSn+Hz/rCH2pwOw3nCgs4wyAcDWYv9hb8sgvDCWyC8LkM+f5wQbSccXqFO8TcmjUwadoFt/3rIiiRYJUY+m6EVSiBhZuZlPZ+JD505thXNqUlJC/Z8oJl4IF51kEM8dJiYMnJX3AotrGRtXYgU+jIDZg==;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Method"},{"location":"knowledge/other/index.html","text":"0X2FYSF1D+6+R423ocgLVw==;iD3gw663xZCTZjjR8CrJSK/CLVMFM+2Qwa379JlQdV7IaRYrYwrzzR8DE0qksG8T16o7G7pTepVXtMVsj8kBdetB8N5s4weiLq4gYDGIpwc+qfuuPhFf1hlfiCaSYAcaqSbmGez0wSIOUTbll4rWUD5NN9/y2lDFsPefYJwLlOoDiDpgnZuoloTQkK6eI5ldxRScdpADYAqgqSlJyglD/Q==;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Introduction"},{"location":"model/data.html","text":"DsAeQhTZpgS4/0b8ptZ4ug==;A1dBDwMZ5TWNS7EYCc8Gp2prH5HCKHIx/BMPigFcQ3Ee9V/SV+pc5TuBhJzYP1PgyPA880H7mcF/9qEUpfYdK1QrI3rWGx15XWIyU5xpvGbQ3GJiJnxD3FxlE4U5IPlIbPQU+Xjds9YbUwQza/UKoDWnKgXB2x54Tc/dO63oCTc=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Data"},{"location":"model/env.html","text":"UEE0eekO4kQLuAhnBJLH4A==;4YPo0dIHdi4yrqRQCo299mH+Vctvdy3TNcrHJ8R0uVkTPs5iw0G51InkngYtsYSc44Ngg6F6rKwprQv44IPh7C9ZpLVuQbFROsyxFaFjp4pq0/Y86ywuDo0m3AhAkmyM+vgxIrgW/bdfB6e8A7V4bnoUV/Js/xLA5NWcIFn24X4=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Environment"},{"location":"model/policy.html","text":"1ki0/Xx2L7pWHk/yszQ/vg==;ShI0GMpawJqrauVQFsI5D1JBMNXjvYP9nqXkpHdbeVU8C8q9EifeH9lenkXjBZvx7nOwGMgvo6WFwuQW4KVE1IY+XyBVM4iiIAojzHUqHSL7KvT2kLqP4hbT3Pbb9RpEuv2bC5khTeHMVPMurlG4pksdSwrBshGagX8ejGogFDI=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Policy"},{"location":"model/reward.html","text":"WmLvbHsxe9x+UMDduXUOLg==;QiLT1kFtbU6WNKJgoyjE1eONV6TDUsgLIgWi+1q2ppmnz82TwXtrFR7vl0grce01uOrmmyfUFGziAFWKL45ug9WGq2O9yPnAjG+97RL+CXd7ejmJSwbvvoldzHHV75jQckpg+HJfjkDykA/+nTsCWzvh6HIovIpXsoiciLs/67c=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Reward"},{"location":"model/utility.html","text":"BL6Bvnr0uC8j9sQ66nVbHw==;DY7mN+H0TW7mbWatsAYRpvHwNAdy+psYTvYsHa1qK2FjWgWGiKu9/3SStL4IpgF6h5OX/ZX2njcTklt8Qa2x6S8UXgJED1mJ5B8lMv4j7CISxAHKJh7hr/ULlBaV0FQoejjbwP4aLx5Zs4zp5HRNSOECFjx/XodeWy4A3FK2Rfc=;^ This website is encrypted with AES. Password is required (function() { var strip_padding = function(padded_content, padding_char) { /* Strips the padding character from decrypted content. */ for (var i = padded_content.length; i > 0; i--) { if (padded_content[i - 1] !== padding_char) { return padded_content.slice(0, i); } } }; var decrypt_content = function(password, iv_b64, ciphertext_b64, padding_char) { /* Decrypts the content from the ciphertext bundle. */ var key = CryptoJS.MD5(password), iv = CryptoJS.enc.Base64.parse(iv_b64), ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64), bundle = { key: key, iv: iv, ciphertext: ciphertext }; var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding }); try { return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char); } catch (err) { // encoding failed; wrong password return false; } }; var setCookie = function(name,value,days,path) { /* Set local cookie to store password */ var expires = \"\"; var current_path = \"; path=/\" if (days) { var date = new Date(); date.setTime(date.getTime() + (days*24*60*60*1000)); expires = \"; expires=\" + date.toUTCString(); } if (path) { current_path = \"; path=\" + path } encryptcontent = name + \"=\" + encodeURIComponent(value || \"\") + expires + current_path; // add security flag on cookie encryptcontent = encryptcontent + \"; SameSite=Strict; Secure\"; return encryptcontent; }; var getCookie = function(name) { /* Get password store in cookie */ var nameEQ = name + \"=\"; var ca = document.cookie.split(';'); for(var i=0;i < ca.length;i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1,c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length); } return null; }; var init_decryptor = function() { var password_input = document.getElementById('mkdocs-content-password'), encrypted_content = document.getElementById('mkdocs-encrypted-content'), decrypted_content = document.getElementById('mkdocs-decrypted-content'), decrypt_form = document.getElementById('mkdocs-decrypt-form'); // Adjust password field width to placeholder length let input = document.getElementById(\"mkdocs-content-password\"); input.setAttribute('size', input.getAttribute('placeholder').length); var decrypt_action = function() { // grab the ciphertext bundle var parts = encrypted_content.innerHTML.split(';'); // decrypt it var content = decrypt_content( password_input.value, parts[0], parts[1], parts[2] ); if (content) { // success; display the decrypted content decrypted_content.innerHTML = content; encrypted_content.parentNode.removeChild(encrypted_content); // any post processing on the decrypted content should be done here // } else { // create HTML element for the inform message var decrypt_msg = document.createElement('p'); decrypt_msg.setAttribute('id', 'mkdocs-decrypt-msg') var node = document.createTextNode('Invalid password.') decrypt_msg.appendChild(node) var mkdocs_decrypt_msg = document.getElementById('mkdocs-decrypt-msg'); // clear all previous failure messages while (mkdocs_decrypt_msg.firstChild) { mkdocs_decrypt_msg.firstChild.remove(); } mkdocs_decrypt_msg.appendChild(decrypt_msg); password_input.value = ''; password_input.focus(); } } /* If remember_password is set, try to use cookie to decrypt content when page is loaded */ var password_cookie = getCookie('encryptcontent') if (password_cookie) { password_input.value = password_cookie decrypt_action(); } password_input.addEventListener('keydown', function(event) { if (event.key === \"Enter\") { if (event.ctrlKey) { // set password on cookie with default path=/ (Overwrite specific cookie) // this cookie can by use on all page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1) } else { // set password on cookie with specific path=document.location.pathname // this cookie can only be use on this specific page of your site document.cookie = setCookie(\"encryptcontent\", password_input.value, 1, document.location.pathname) } event.preventDefault(); decrypt_action() } }); }; document.addEventListener('DOMContentLoaded', init_decryptor); })();","title":"[LOCK]Utility"}]}